
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Feb 16 18:24:06 CST 2020
//----------------------------------------------------

package gramaticas;

import java_cup.runtime.Symbol;
import pollitos.PolloCSV;
import java.util.ArrayList;
import operacionMysql.OperacionEliminar;
import operacionMysql.OperacionInsertar;
import operacionMysql.OperacionSeleccionar;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Feb 16 18:24:06 CST 2020
  */
public class SintaxCSV extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintaxCSV() {super();}

  /** Constructor which sets the default scanner. */
  public SintaxCSV(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintaxCSV(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\027\000\002\002\004\000\002\004\002\000\002\002" +
    "\005\000\002\005\002\000\002\002\005\000\002\006\002" +
    "\000\002\002\005\000\002\007\002\000\002\002\005\000" +
    "\002\002\002\000\002\010\002\000\002\003\005\000\002" +
    "\011\002\000\002\003\006\000\002\012\002\000\002\003" +
    "\006\000\002\013\002\000\002\003\006\000\002\014\002" +
    "\000\002\003\005\000\002\015\002\000\002\003\005\000" +
    "\002\003\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\041\000\014\002\ufff8\004\004\007\006\010\005\011" +
    "\010\001\002\000\014\002\ufffa\004\ufffa\007\ufffa\010\ufffa" +
    "\011\ufffa\001\002\000\012\002\ufffe\004\ufffe\005\ufffe\006" +
    "\ufffe\001\002\000\012\002\000\004\000\005\000\006\000" +
    "\001\002\000\004\002\035\001\002\000\012\002\ufffc\004" +
    "\ufffc\005\ufffc\006\ufffc\001\002\000\012\002\uffeb\004\012" +
    "\005\015\006\014\001\002\000\020\002\ufff7\004\ufff7\005" +
    "\ufff7\006\ufff7\007\023\010\022\011\025\001\002\000\004" +
    "\002\ufffb\001\002\000\014\002\uffef\004\uffef\007\uffef\010" +
    "\uffef\011\uffef\001\002\000\014\002\uffed\004\uffed\007\uffed" +
    "\010\uffed\011\uffed\001\002\000\014\002\ufff8\004\004\007" +
    "\006\010\005\011\010\001\002\000\004\002\uffec\001\002" +
    "\000\014\002\ufff8\004\004\007\006\010\005\011\010\001" +
    "\002\000\004\002\uffee\001\002\000\012\002\ufff3\004\ufff3" +
    "\005\ufff3\006\ufff3\001\002\000\012\002\ufff5\004\ufff5\005" +
    "\ufff5\006\ufff5\001\002\000\012\002\uffeb\004\012\005\015" +
    "\006\014\001\002\000\012\002\ufff1\004\ufff1\005\ufff1\006" +
    "\ufff1\001\002\000\012\002\uffeb\004\012\005\015\006\014" +
    "\001\002\000\004\002\ufff0\001\002\000\004\002\ufff6\001" +
    "\002\000\012\002\uffeb\004\012\005\015\006\014\001\002" +
    "\000\004\002\ufff4\001\002\000\012\002\uffeb\004\012\005" +
    "\015\006\014\001\002\000\004\002\ufff2\001\002\000\004" +
    "\002\001\001\002\000\012\002\uffeb\004\012\005\015\006" +
    "\014\001\002\000\004\002\uffff\001\002\000\012\002\uffeb" +
    "\004\012\005\015\006\014\001\002\000\004\002\ufffd\001" +
    "\002\000\014\002\ufff8\004\004\007\006\010\005\011\010" +
    "\001\002\000\004\002\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\041\000\004\002\006\001\001\000\004\007\041\001" +
    "\001\000\004\005\037\001\001\000\004\004\035\001\001" +
    "\000\002\001\001\000\004\006\010\001\001\000\004\003" +
    "\012\001\001\000\004\010\023\001\001\000\002\001\001" +
    "\000\004\014\017\001\001\000\004\015\015\001\001\000" +
    "\004\002\016\001\001\000\002\001\001\000\004\002\020" +
    "\001\001\000\002\001\001\000\004\012\032\001\001\000" +
    "\004\011\030\001\001\000\004\003\027\001\001\000\004" +
    "\013\025\001\001\000\004\003\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\031\001\001\000\002" +
    "\001\001\000\004\003\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\036\001\001\000\002\001\001" +
    "\000\004\003\040\001\001\000\002\001\001\000\004\002" +
    "\042\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintaxCSV$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintaxCSV$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintaxCSV$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    public int contFilas = 0;
    public int contColumnas = 0;
    public int contColumnas2 = 0;
    public int contElementos = 0;

    public ArrayList<PolloCSV> palabrasOrdenadas;
    PolloCSV pollito = new PolloCSV();    

    public SintaxCSV(AnalizadorLexico3 lex, ArrayList<PolloCSV> palabrasOrdenadas){
        super(lex);
        this.palabrasOrdenadas = palabrasOrdenadas;
    };

    public void setAccion(String tipo, String mensaje, String accion){
        System.out.println(tipo+" "+mensaje);
    }

    public void syntax_error(Symbol s){
        setAccion("ERROR", "Error sintaxis token: "+s.right,"");
    };

    public void llenarMatriz(int contFilas, int contColumnas, int totalElementos){
        String[][] arregloPalabras = new String[contFilas+1][contColumnas+1];
        System.out.println("Filas: "+contFilas+" Columnas: "+contColumnas+" Total Elementos: "+totalElementos);        
    }
    
    public ArrayList<PolloCSV> listarElementos(ArrayList<PolloCSV> list, PolloCSV pol, int numFila, Object columna, int numColumna, int tipoValor){
        PolloCSV pollito = new PolloCSV();
        pollito.setFila(numFila);
        pollito.setDatoColumna(columna);
        pollito.setTipoValor(tipoValor);
        if(numFila == 0){
            pollito.setTipo("Titulo");
            pollito.setColumna(numColumna);
        } else {
            pollito.setTipo("Elemento");
            pollito.setColumna(numColumna);
        }
        System.out.println("Tipo: "+pollito.getTipo()+" Texto: "+pollito.getDatoColumna()+" No. Columna: "+pollito.getColumna()+" No. Fila: "+pollito.getFila()+" Tipo de dato: "+tipoValor);
        list.add(pollito);
        return list;
    }

    public void escribirDato(ArrayList<PolloCSV> list){
        System.out.println(list.size());
    }



    public void verDatos(ArrayList<PolloCSV> list){
        for(PolloCSV a: list){
            System.out.println(a.getDatoColumna());
        }
    }
    

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintaxCSV$actions {
  private final SintaxCSV parser;

  /** Constructor */
  CUP$SintaxCSV$actions(SintaxCSV parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintaxCSV$do_action(
    int                        CUP$SintaxCSV$act_num,
    java_cup.runtime.lr_parser CUP$SintaxCSV$parser,
    java.util.Stack            CUP$SintaxCSV$stack,
    int                        CUP$SintaxCSV$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintaxCSV$result;

      /* select the action based on the action number */
      switch (CUP$SintaxCSV$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // a ::= 
            {
              Object RESULT =null;
		parser.llenarMatriz(parser.contFilas, parser.contColumnas, parser.contElementos); parser.escribirDato(parser.palabrasOrdenadas); parser.verDatos(parser.palabrasOrdenadas);   
              CUP$SintaxCSV$result = parser.getSymbolFactory().newSymbol("a",1, ((java_cup.runtime.Symbol)CUP$SintaxCSV$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCSV$stack.peek()), RESULT);
            }
          return CUP$SintaxCSV$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // a ::= ENTER NT$9 aa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxCSV$stack.elementAt(CUP$SintaxCSV$top-1)).value;

              CUP$SintaxCSV$result = parser.getSymbolFactory().newSymbol("a",1, ((java_cup.runtime.Symbol)CUP$SintaxCSV$stack.elementAt(CUP$SintaxCSV$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxCSV$stack.peek()), RESULT);
            }
          return CUP$SintaxCSV$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$9 ::= 
            {
              Object RESULT =null;
parser.contFilas++; parser.escribirDato(parser.palabrasOrdenadas); 
              CUP$SintaxCSV$result = parser.getSymbolFactory().newSymbol("NT$9",11, ((java_cup.runtime.Symbol)CUP$SintaxCSV$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCSV$stack.peek()), RESULT);
            }
          return CUP$SintaxCSV$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // a ::= COMA_ENTER NT$8 aa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxCSV$stack.elementAt(CUP$SintaxCSV$top-1)).value;

              CUP$SintaxCSV$result = parser.getSymbolFactory().newSymbol("a",1, ((java_cup.runtime.Symbol)CUP$SintaxCSV$stack.elementAt(CUP$SintaxCSV$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxCSV$stack.peek()), RESULT);
            }
          return CUP$SintaxCSV$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$8 ::= 
            {
              Object RESULT =null;
 parser.contElementos++; if(parser.contFilas==0){ parser.contColumnas++; parser.listarElementos(parser.palabrasOrdenadas, parser.pollito, parser.contFilas, "", parser.contColumnas, 1);  } else { parser.contColumnas2 = parser.contElementos - (parser.contColumnas)*(parser.contFilas); parser.listarElementos(parser.palabrasOrdenadas, parser.pollito, parser.contFilas, "", parser.contColumnas2, 1); }  parser.contFilas++;   
              CUP$SintaxCSV$result = parser.getSymbolFactory().newSymbol("NT$8",10, ((java_cup.runtime.Symbol)CUP$SintaxCSV$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCSV$stack.peek()), RESULT);
            }
          return CUP$SintaxCSV$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // a ::= COMA DATO_DECIMAL NT$7 a 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxCSV$stack.elementAt(CUP$SintaxCSV$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCSV$stack.elementAt(CUP$SintaxCSV$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCSV$stack.elementAt(CUP$SintaxCSV$top-2)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$SintaxCSV$stack.elementAt(CUP$SintaxCSV$top-2)).value;

              CUP$SintaxCSV$result = parser.getSymbolFactory().newSymbol("a",1, ((java_cup.runtime.Symbol)CUP$SintaxCSV$stack.elementAt(CUP$SintaxCSV$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxCSV$stack.peek()), RESULT);
            }
          return CUP$SintaxCSV$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$7 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCSV$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCSV$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$SintaxCSV$stack.peek()).value;
 parser.contElementos++; if(parser.contFilas==0){ parser.contColumnas++; parser.listarElementos(parser.palabrasOrdenadas, parser.pollito, parser.contFilas, e, parser.contColumnas, 2);   } else if(parser.contFilas != 0) { parser.contColumnas2 = parser.contElementos - (parser.contColumnas)*(parser.contFilas); parser.listarElementos(parser.palabrasOrdenadas, parser.pollito, parser.contFilas, e, parser.contColumnas2, 2); } 
              CUP$SintaxCSV$result = parser.getSymbolFactory().newSymbol("NT$7",9, ((java_cup.runtime.Symbol)CUP$SintaxCSV$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCSV$stack.peek()), RESULT);
            }
          return CUP$SintaxCSV$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // a ::= COMA DATO_NUMERICO NT$6 a 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxCSV$stack.elementAt(CUP$SintaxCSV$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCSV$stack.elementAt(CUP$SintaxCSV$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCSV$stack.elementAt(CUP$SintaxCSV$top-2)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$SintaxCSV$stack.elementAt(CUP$SintaxCSV$top-2)).value;

              CUP$SintaxCSV$result = parser.getSymbolFactory().newSymbol("a",1, ((java_cup.runtime.Symbol)CUP$SintaxCSV$stack.elementAt(CUP$SintaxCSV$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxCSV$stack.peek()), RESULT);
            }
          return CUP$SintaxCSV$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$6 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCSV$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCSV$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$SintaxCSV$stack.peek()).value;
 parser.contElementos++; if(parser.contFilas==0){ parser.contColumnas++; parser.listarElementos(parser.palabrasOrdenadas, parser.pollito, parser.contFilas, e, parser.contColumnas, 2);   } else { parser.contColumnas2 = parser.contElementos - (parser.contColumnas)*(parser.contFilas); parser.listarElementos(parser.palabrasOrdenadas, parser.pollito, parser.contFilas, e, parser.contColumnas2, 2); } 
              CUP$SintaxCSV$result = parser.getSymbolFactory().newSymbol("NT$6",8, ((java_cup.runtime.Symbol)CUP$SintaxCSV$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCSV$stack.peek()), RESULT);
            }
          return CUP$SintaxCSV$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // a ::= COMA DATO_ALFANUMERICO NT$5 a 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxCSV$stack.elementAt(CUP$SintaxCSV$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCSV$stack.elementAt(CUP$SintaxCSV$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCSV$stack.elementAt(CUP$SintaxCSV$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxCSV$stack.elementAt(CUP$SintaxCSV$top-2)).value;

              CUP$SintaxCSV$result = parser.getSymbolFactory().newSymbol("a",1, ((java_cup.runtime.Symbol)CUP$SintaxCSV$stack.elementAt(CUP$SintaxCSV$top-3)), ((java_cup.runtime.Symbol)CUP$SintaxCSV$stack.peek()), RESULT);
            }
          return CUP$SintaxCSV$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$5 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCSV$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCSV$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxCSV$stack.peek()).value;
 parser.contElementos++; if(parser.contFilas==0){ parser.contColumnas++; parser.listarElementos(parser.palabrasOrdenadas, parser.pollito, parser.contFilas, e, parser.contColumnas, 1);   } else if(parser.contFilas != 0) { parser.contColumnas2 = parser.contElementos - (parser.contColumnas)*(parser.contFilas); parser.listarElementos(parser.palabrasOrdenadas, parser.pollito, parser.contFilas, e, parser.contColumnas2, 1); } 
              CUP$SintaxCSV$result = parser.getSymbolFactory().newSymbol("NT$5",7, ((java_cup.runtime.Symbol)CUP$SintaxCSV$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCSV$stack.peek()), RESULT);
            }
          return CUP$SintaxCSV$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // a ::= COMA NT$4 a 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxCSV$stack.elementAt(CUP$SintaxCSV$top-1)).value;

              CUP$SintaxCSV$result = parser.getSymbolFactory().newSymbol("a",1, ((java_cup.runtime.Symbol)CUP$SintaxCSV$stack.elementAt(CUP$SintaxCSV$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxCSV$stack.peek()), RESULT);
            }
          return CUP$SintaxCSV$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$4 ::= 
            {
              Object RESULT =null;
 parser.contElementos++; if(parser.contFilas==0){ parser.contColumnas++; parser.listarElementos(parser.palabrasOrdenadas, parser.pollito, parser.contFilas, "", parser.contColumnas, 1);   } else { parser.contColumnas2 = parser.contElementos - (parser.contColumnas)*(parser.contFilas);         parser.listarElementos(parser.palabrasOrdenadas, parser.pollito, parser.contFilas, "", parser.contColumnas2, 1); } 
              CUP$SintaxCSV$result = parser.getSymbolFactory().newSymbol("NT$4",6, ((java_cup.runtime.Symbol)CUP$SintaxCSV$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCSV$stack.peek()), RESULT);
            }
          return CUP$SintaxCSV$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // aa ::= 
            {
              Object RESULT =null;
		parser.llenarMatriz(parser.contFilas, parser.contColumnas, parser.contElementos); parser.escribirDato(parser.palabrasOrdenadas);  
              CUP$SintaxCSV$result = parser.getSymbolFactory().newSymbol("aa",0, ((java_cup.runtime.Symbol)CUP$SintaxCSV$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCSV$stack.peek()), RESULT);
            }
          return CUP$SintaxCSV$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // aa ::= COMA NT$3 aa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxCSV$stack.elementAt(CUP$SintaxCSV$top-1)).value;

              CUP$SintaxCSV$result = parser.getSymbolFactory().newSymbol("aa",0, ((java_cup.runtime.Symbol)CUP$SintaxCSV$stack.elementAt(CUP$SintaxCSV$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxCSV$stack.peek()), RESULT);
            }
          return CUP$SintaxCSV$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$3 ::= 
            {
              Object RESULT =null;
 parser.contElementos++; if(parser.contFilas==0){ parser.contColumnas++; parser.listarElementos(parser.palabrasOrdenadas, parser.pollito, parser.contFilas, "", parser.contColumnas, 1); } else { parser.contColumnas2 = parser.contElementos - (parser.contColumnas)*(parser.contFilas); parser.listarElementos(parser.palabrasOrdenadas, parser.pollito, parser.contFilas, "", parser.contColumnas2, 1); }   
              CUP$SintaxCSV$result = parser.getSymbolFactory().newSymbol("NT$3",5, ((java_cup.runtime.Symbol)CUP$SintaxCSV$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCSV$stack.peek()), RESULT);
            }
          return CUP$SintaxCSV$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // aa ::= DATO_DECIMAL NT$2 a 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxCSV$stack.elementAt(CUP$SintaxCSV$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxCSV$stack.elementAt(CUP$SintaxCSV$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxCSV$stack.elementAt(CUP$SintaxCSV$top-2)).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$SintaxCSV$stack.elementAt(CUP$SintaxCSV$top-2)).value;

              CUP$SintaxCSV$result = parser.getSymbolFactory().newSymbol("aa",0, ((java_cup.runtime.Symbol)CUP$SintaxCSV$stack.elementAt(CUP$SintaxCSV$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxCSV$stack.peek()), RESULT);
            }
          return CUP$SintaxCSV$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$2 ::= 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintaxCSV$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintaxCSV$stack.peek()).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$SintaxCSV$stack.peek()).value;
 parser.contElementos++; if(parser.contFilas==0){ parser.contColumnas++; parser.listarElementos(parser.palabrasOrdenadas, parser.pollito, parser.contFilas, c, parser.contColumnas, 2);   } else { parser.contColumnas2 = parser.contElementos - (parser.contColumnas)*(parser.contFilas); parser.listarElementos(parser.palabrasOrdenadas, parser.pollito, parser.contFilas, c, parser.contColumnas2, 2); } 
              CUP$SintaxCSV$result = parser.getSymbolFactory().newSymbol("NT$2",4, ((java_cup.runtime.Symbol)CUP$SintaxCSV$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCSV$stack.peek()), RESULT);
            }
          return CUP$SintaxCSV$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // aa ::= DATO_NUMERICO NT$1 a 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxCSV$stack.elementAt(CUP$SintaxCSV$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxCSV$stack.elementAt(CUP$SintaxCSV$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxCSV$stack.elementAt(CUP$SintaxCSV$top-2)).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxCSV$stack.elementAt(CUP$SintaxCSV$top-2)).value;

              CUP$SintaxCSV$result = parser.getSymbolFactory().newSymbol("aa",0, ((java_cup.runtime.Symbol)CUP$SintaxCSV$stack.elementAt(CUP$SintaxCSV$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxCSV$stack.peek()), RESULT);
            }
          return CUP$SintaxCSV$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintaxCSV$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintaxCSV$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SintaxCSV$stack.peek()).value;
 System.out.println(b); parser.contElementos++; if(parser.contFilas==0){ parser.contColumnas++; parser.listarElementos(parser.palabrasOrdenadas, parser.pollito, parser.contFilas, b, parser.contColumnas, 2); }  else { parser.contColumnas2 = parser.contElementos - (parser.contColumnas)*(parser.contFilas); parser.listarElementos(parser.palabrasOrdenadas, parser.pollito, parser.contFilas, b, parser.contColumnas2, 2); }   
              CUP$SintaxCSV$result = parser.getSymbolFactory().newSymbol("NT$1",3, ((java_cup.runtime.Symbol)CUP$SintaxCSV$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCSV$stack.peek()), RESULT);
            }
          return CUP$SintaxCSV$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // aa ::= DATO_ALFANUMERICO NT$0 a 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintaxCSV$stack.elementAt(CUP$SintaxCSV$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCSV$stack.elementAt(CUP$SintaxCSV$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCSV$stack.elementAt(CUP$SintaxCSV$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxCSV$stack.elementAt(CUP$SintaxCSV$top-2)).value;

              CUP$SintaxCSV$result = parser.getSymbolFactory().newSymbol("aa",0, ((java_cup.runtime.Symbol)CUP$SintaxCSV$stack.elementAt(CUP$SintaxCSV$top-2)), ((java_cup.runtime.Symbol)CUP$SintaxCSV$stack.peek()), RESULT);
            }
          return CUP$SintaxCSV$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintaxCSV$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintaxCSV$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintaxCSV$stack.peek()).value;
 System.out.println(e); parser.contElementos++;   if(parser.contFilas==0){ parser.contColumnas++; parser.listarElementos(parser.palabrasOrdenadas, parser.pollito, parser.contFilas, e, parser.contColumnas, 1); } else if(parser.contFilas != 0) { parser.contColumnas2 = parser.contElementos - (parser.contColumnas)*(parser.contFilas);    parser.listarElementos(parser.palabrasOrdenadas, parser.pollito, parser.contFilas, e, parser.contColumnas2, 1); } 
              CUP$SintaxCSV$result = parser.getSymbolFactory().newSymbol("NT$0",2, ((java_cup.runtime.Symbol)CUP$SintaxCSV$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintaxCSV$stack.peek()), RESULT);
            }
          return CUP$SintaxCSV$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= aa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintaxCSV$stack.elementAt(CUP$SintaxCSV$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintaxCSV$stack.elementAt(CUP$SintaxCSV$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintaxCSV$stack.elementAt(CUP$SintaxCSV$top-1)).value;
		RESULT = start_val;
              CUP$SintaxCSV$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintaxCSV$stack.elementAt(CUP$SintaxCSV$top-1)), ((java_cup.runtime.Symbol)CUP$SintaxCSV$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintaxCSV$parser.done_parsing();
          return CUP$SintaxCSV$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

