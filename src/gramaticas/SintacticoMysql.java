
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Feb 13 23:17:23 CST 2020
//----------------------------------------------------

package gramaticas;

import java_cup.runtime.Symbol;
import operacionMysql.*;
import java.util.ArrayList;
import pollitos.PolloCSV;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Feb 13 23:17:23 CST 2020
  */
public class SintacticoMysql extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintacticoMysql() {super();}

  /** Constructor which sets the default scanner. */
  public SintacticoMysql(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoMysql(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\122\000\002\002\004\000\002\002\004\000\002\002" +
    "\005\000\002\002\005\000\002\002\005\000\002\045\002" +
    "\000\002\014\005\000\002\046\002\000\002\014\006\000" +
    "\002\047\002\000\002\016\006\000\002\016\002\000\002" +
    "\015\007\000\002\017\005\000\002\017\004\000\002\017" +
    "\003\000\002\023\006\000\002\024\005\000\002\024\005" +
    "\000\002\024\003\000\002\025\005\000\002\025\004\000" +
    "\002\027\004\000\002\030\007\000\002\030\005\000\002" +
    "\031\007\000\002\031\005\000\002\031\004\000\002\032" +
    "\006\000\002\033\005\000\002\033\004\000\002\034\010" +
    "\000\002\034\006\000\002\026\011\000\002\026\007\000" +
    "\002\026\003\000\002\026\004\000\002\041\006\000\002" +
    "\042\005\000\002\042\003\000\002\042\004\000\002\043" +
    "\011\000\002\043\007\000\002\043\007\000\002\043\007" +
    "\000\002\043\007\000\002\043\007\000\002\043\007\000" +
    "\002\044\003\000\002\044\003\000\002\044\002\000\002" +
    "\007\011\000\002\007\007\000\002\007\007\000\002\007" +
    "\007\000\002\007\007\000\002\007\007\000\002\007\007" +
    "\000\002\010\011\000\002\010\007\000\002\010\007\000" +
    "\002\010\007\000\002\010\007\000\002\010\007\000\002" +
    "\010\007\000\002\011\011\000\002\011\007\000\002\011" +
    "\007\000\002\011\007\000\002\011\007\000\002\011\007" +
    "\000\002\011\007\000\002\011\002\000\002\012\011\000" +
    "\002\012\007\000\002\012\007\000\002\012\007\000\002" +
    "\012\007\000\002\012\007\000\002\012\007\000\002\012" +
    "\002\000\002\005\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\356\000\012\004\005\007\004\010\010\012\006\001" +
    "\002\000\004\013\315\001\002\000\006\024\267\034\270" +
    "\001\002\000\004\013\252\001\002\000\004\002\251\001" +
    "\002\000\004\013\011\001\002\000\004\034\012\001\002" +
    "\000\004\035\014\001\002\000\004\002\ufffe\001\002\000" +
    "\004\034\015\001\002\000\006\011\020\035\016\001\002" +
    "\000\004\034\247\001\002\000\004\002\uffe5\001\002\000" +
    "\004\034\021\001\002\000\004\025\023\001\002\000\004" +
    "\002\uffe3\001\002\000\006\020\025\033\024\001\002\000" +
    "\010\006\032\021\030\023\033\001\002\000\004\034\026" +
    "\001\002\000\004\020\027\001\002\000\010\006\032\021" +
    "\030\023\033\001\002\000\004\034\236\001\002\000\004" +
    "\002\uffe2\001\002\000\004\034\034\001\002\000\004\002" +
    "\uffde\001\002\000\016\025\041\026\040\027\037\030\042" +
    "\031\043\032\036\001\002\000\004\002\uffdd\001\002\000" +
    "\004\033\233\001\002\000\004\033\230\001\002\000\004" +
    "\033\225\001\002\000\006\020\216\033\215\001\002\000" +
    "\004\033\212\001\002\000\004\033\044\001\002\000\010" +
    "\015\047\016\051\023\uffcf\001\002\000\004\023\uffd0\001" +
    "\002\000\004\023\uffd1\001\002\000\004\034\133\001\002" +
    "\000\004\023\131\001\002\000\004\034\052\001\002\000" +
    "\016\025\056\026\055\027\053\030\057\031\060\032\054" +
    "\001\002\000\004\033\127\001\002\000\004\033\125\001" +
    "\002\000\004\033\123\001\002\000\006\020\116\033\115" +
    "\001\002\000\004\033\113\001\002\000\004\033\061\001" +
    "\002\000\006\016\063\023\uffb1\001\002\000\004\023\uffc3" +
    "\001\002\000\004\034\064\001\002\000\016\025\070\026" +
    "\067\027\065\030\071\031\072\032\066\001\002\000\004" +
    "\033\111\001\002\000\004\033\107\001\002\000\004\033" +
    "\105\001\002\000\006\020\100\033\077\001\002\000\004" +
    "\033\075\001\002\000\004\033\073\001\002\000\006\016" +
    "\063\023\uffb1\001\002\000\004\023\uffb4\001\002\000\006" +
    "\016\063\023\uffb1\001\002\000\004\023\uffb3\001\002\000" +
    "\006\016\063\023\uffb1\001\002\000\004\034\101\001\002" +
    "\000\004\020\102\001\002\000\006\016\063\023\uffb1\001" +
    "\002\000\004\023\uffb8\001\002\000\004\023\uffb7\001\002" +
    "\000\006\016\063\023\uffb1\001\002\000\004\023\uffb5\001" +
    "\002\000\006\016\063\023\uffb1\001\002\000\004\023\uffb2" +
    "\001\002\000\006\016\063\023\uffb1\001\002\000\004\023" +
    "\uffb6\001\002\000\006\016\063\023\uffb1\001\002\000\004" +
    "\023\uffc2\001\002\000\006\016\063\023\uffb1\001\002\000" +
    "\004\034\117\001\002\000\004\020\120\001\002\000\006" +
    "\016\063\023\uffb1\001\002\000\004\023\uffc7\001\002\000" +
    "\004\023\uffc6\001\002\000\006\016\063\023\uffb1\001\002" +
    "\000\004\023\uffc4\001\002\000\006\016\063\023\uffb1\001" +
    "\002\000\004\023\uffc1\001\002\000\006\016\063\023\uffb1" +
    "\001\002\000\004\023\uffc5\001\002\000\004\002\uffb0\001" +
    "\002\000\004\002\uffd4\001\002\000\016\025\137\026\136" +
    "\027\134\030\140\031\141\032\135\001\002\000\004\033" +
    "\210\001\002\000\004\033\206\001\002\000\004\033\204" +
    "\001\002\000\006\020\177\033\176\001\002\000\004\033" +
    "\174\001\002\000\004\033\142\001\002\000\006\015\144" +
    "\023\uffb9\001\002\000\004\023\uffca\001\002\000\004\034" +
    "\145\001\002\000\016\025\151\026\150\027\147\030\152" +
    "\031\153\032\146\001\002\000\004\033\172\001\002\000" +
    "\004\033\170\001\002\000\004\033\166\001\002\000\006" +
    "\020\161\033\160\001\002\000\004\033\156\001\002\000" +
    "\004\033\154\001\002\000\006\015\144\023\uffb9\001\002" +
    "\000\004\023\uffbc\001\002\000\006\015\144\023\uffb9\001" +
    "\002\000\004\023\uffbb\001\002\000\006\015\144\023\uffb9" +
    "\001\002\000\004\034\162\001\002\000\004\020\163\001" +
    "\002\000\006\015\144\023\uffb9\001\002\000\004\023\uffc0" +
    "\001\002\000\004\023\uffbf\001\002\000\006\015\144\023" +
    "\uffb9\001\002\000\004\023\uffbd\001\002\000\006\015\144" +
    "\023\uffb9\001\002\000\004\023\uffbe\001\002\000\006\015" +
    "\144\023\uffb9\001\002\000\004\023\uffba\001\002\000\006" +
    "\015\144\023\uffb9\001\002\000\004\023\uffc9\001\002\000" +
    "\006\015\144\023\uffb9\001\002\000\004\034\200\001\002" +
    "\000\004\020\201\001\002\000\006\015\144\023\uffb9\001" +
    "\002\000\004\023\uffce\001\002\000\004\023\uffcd\001\002" +
    "\000\006\015\144\023\uffb9\001\002\000\004\023\uffcb\001" +
    "\002\000\006\015\144\023\uffb9\001\002\000\004\023\uffc8" +
    "\001\002\000\006\015\144\023\uffb9\001\002\000\004\023" +
    "\uffcc\001\002\000\010\015\047\016\051\023\uffcf\001\002" +
    "\000\004\023\131\001\002\000\004\002\uffd3\001\002\000" +
    "\010\015\047\016\051\023\uffcf\001\002\000\004\034\217" +
    "\001\002\000\004\020\220\001\002\000\010\015\047\016" +
    "\051\023\uffcf\001\002\000\004\023\131\001\002\000\004" +
    "\002\uffd8\001\002\000\004\023\131\001\002\000\004\002" +
    "\uffd7\001\002\000\010\015\047\016\051\023\uffcf\001\002" +
    "\000\004\023\131\001\002\000\004\002\uffd5\001\002\000" +
    "\010\015\047\016\051\023\uffcf\001\002\000\004\023\131" +
    "\001\002\000\004\002\uffd6\001\002\000\010\015\047\016" +
    "\051\023\uffcf\001\002\000\004\023\131\001\002\000\004" +
    "\002\uffd2\001\002\000\004\025\237\001\002\000\006\020" +
    "\241\033\240\001\002\000\010\006\032\021\030\023\033" +
    "\001\002\000\004\034\242\001\002\000\004\020\243\001" +
    "\002\000\010\006\032\021\030\023\033\001\002\000\004" +
    "\002\uffe0\001\002\000\004\002\uffdf\001\002\000\004\002" +
    "\uffe1\001\002\000\006\011\020\035\016\001\002\000\004" +
    "\002\uffe4\001\002\000\004\002\001\001\002\000\004\034" +
    "\254\001\002\000\004\002\ufffd\001\002\000\004\035\255" +
    "\001\002\000\004\034\256\001\002\000\010\006\262\023" +
    "\261\035\260\001\002\000\004\002\uffdc\001\002\000\004" +
    "\034\264\001\002\000\004\002\uffda\001\002\000\004\034" +
    "\034\001\002\000\004\002\uffd9\001\002\000\010\006\262" +
    "\023\261\035\260\001\002\000\004\002\uffdb\001\002\000" +
    "\004\002\000\001\002\000\004\013\ufffc\001\002\000\006" +
    "\013\ufffa\021\ufffa\001\002\000\006\013\ufff6\021\272\001" +
    "\002\000\004\034\310\001\002\000\004\013\274\001\002" +
    "\000\004\034\276\001\002\000\004\002\ufff9\001\002\000" +
    "\004\035\277\001\002\000\004\034\300\001\002\000\010" +
    "\006\302\023\303\035\301\001\002\000\004\034\306\001" +
    "\002\000\004\034\034\001\002\000\004\002\ufff2\001\002" +
    "\000\004\002\ufff5\001\002\000\004\002\ufff3\001\002\000" +
    "\010\006\302\023\303\035\301\001\002\000\004\002\ufff4" +
    "\001\002\000\006\013\ufff8\021\ufff8\001\002\000\006\013" +
    "\ufff6\021\272\001\002\000\004\013\ufff7\001\002\000\004" +
    "\013\274\001\002\000\004\002\ufffb\001\002\000\004\034" +
    "\316\001\002\000\004\035\320\001\002\000\004\002\uffff" +
    "\001\002\000\004\034\321\001\002\000\010\014\324\017" +
    "\326\035\323\001\002\000\004\002\uffee\001\002\000\004" +
    "\034\357\001\002\000\004\017\336\001\002\000\004\002" +
    "\ufff1\001\002\000\004\034\327\001\002\000\006\021\330" +
    "\022\332\001\002\000\004\034\334\001\002\000\004\002" +
    "\uffef\001\002\000\004\014\324\001\002\000\004\002\uffec" +
    "\001\002\000\006\021\330\022\332\001\002\000\004\002" +
    "\uffed\001\002\000\006\020\341\033\340\001\002\000\004" +
    "\002\uffeb\001\002\000\006\021\344\022\345\001\002\000" +
    "\004\034\342\001\002\000\004\020\343\001\002\000\006" +
    "\021\344\022\345\001\002\000\006\020\351\033\350\001" +
    "\002\000\004\023\347\001\002\000\004\002\uffea\001\002" +
    "\000\004\002\uffe6\001\002\000\006\021\344\022\345\001" +
    "\002\000\004\034\352\001\002\000\004\020\353\001\002" +
    "\000\006\021\344\022\345\001\002\000\004\002\uffe8\001" +
    "\002\000\004\002\uffe7\001\002\000\004\002\uffe9\001\002" +
    "\000\010\014\324\017\326\035\323\001\002\000\004\002" +
    "\ufff0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\356\000\004\002\006\001\001\000\002\001\001\000" +
    "\004\014\265\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\033\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\034" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\026\245\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\043\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\007\045\010\044" +
    "\044\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\131\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\073\001\001\000\002" +
    "\001\001\000\004\012\075\001\001\000\002\001\001\000" +
    "\004\012\103\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\102\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\105\001\001\000\002\001\001\000\004" +
    "\012\107\001\001\000\002\001\001\000\004\012\111\001" +
    "\001\000\002\001\001\000\004\012\113\001\001\000\002" +
    "\001\001\000\004\012\121\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\120\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\123\001\001\000\002\001" +
    "\001\000\004\012\125\001\001\000\002\001\001\000\004" +
    "\012\127\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\142\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\154\001" +
    "\001\000\002\001\001\000\004\011\156\001\001\000\002" +
    "\001\001\000\004\011\164\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\163\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\166\001\001\000\002\001" +
    "\001\000\004\011\170\001\001\000\002\001\001\000\004" +
    "\011\172\001\001\000\002\001\001\000\004\011\174\001" +
    "\001\000\002\001\001\000\004\011\202\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\201\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\204\001\001" +
    "\000\002\001\001\000\004\011\206\001\001\000\002\001" +
    "\001\000\004\011\210\001\001\000\002\001\001\000\010" +
    "\007\045\010\044\044\212\001\001\000\004\005\213\001" +
    "\001\000\002\001\001\000\010\007\045\010\044\044\222" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\007" +
    "\045\010\044\044\220\001\001\000\004\005\221\001\001" +
    "\000\002\001\001\000\004\005\223\001\001\000\002\001" +
    "\001\000\010\007\045\010\044\044\225\001\001\000\004" +
    "\005\226\001\001\000\002\001\001\000\010\007\045\010" +
    "\044\044\230\001\001\000\004\005\231\001\001\000\002" +
    "\001\001\000\010\007\045\010\044\044\233\001\001\000" +
    "\004\005\234\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\244\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\243\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\033" +
    "\247\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\041\252\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\042\256\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\043\262\001" +
    "\001\000\002\001\001\000\004\042\264\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\045\312\001\001\000" +
    "\004\046\270\001\001\000\004\016\272\001\001\000\002" +
    "\001\001\000\004\015\274\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\303\001\001\000\002\001\001\000\004\043\304\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\306\001\001\000\002\001\001\000\004\047" +
    "\310\001\001\000\004\016\311\001\001\000\002\001\001" +
    "\000\004\015\313\001\001\000\002\001\001\000\004\023" +
    "\316\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\024\324\027\321\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\030\336\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\330\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\332\001\001" +
    "\000\002\001\001\000\004\025\334\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\031\355" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\031" +
    "\345\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\031\354\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\031\353\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\024\357\027\321\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoMysql$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoMysql$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoMysql$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public int accionPosible = 0;

    ArrayList<PolloCSV> list;
    OperacionEliminar eliminacion;
    OperacionInsertar insercion;
    OperacionSeleccionar seleccion;

    public SintacticoMysql(AnalizadorLexico lex, ArrayList<PolloCSV> list){
        super(lex);
        this.list = list;
    }
    public void setAccion(String tipo, String mensaje, String accion){
        System.out.println(tipo+" "+mensaje);
    }

    public void syntax_error(Symbol s){
        setAccion("ERROR", "Error Sintaxis token: "+s.right,"");
    }

    public void mostrarValores(String columna){
        
    }

    public void verAccion(int accionPosible){
        System.out.println(accionPosible);
    }
    





    

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintacticoMysql$actions {
  private final SintacticoMysql parser;

  /** Constructor */
  CUP$SintacticoMysql$actions(SintacticoMysql parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintacticoMysql$do_action(
    int                        CUP$SintacticoMysql$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoMysql$parser,
    java.util.Stack            CUP$SintacticoMysql$stack,
    int                        CUP$SintacticoMysql$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoMysql$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoMysql$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ad ::= PUNTO_COMA 
            {
              Object RESULT =null;
		parser.verAccion(parser.accionPosible);
              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("ad",3, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ai ::= 
            {
              Object RESULT =null;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("ai",8, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ai ::= OR PALABRA MAYOR_MENOR NUMERO ai 
            {
              Object RESULT =null;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("ai",8, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ai ::= OR PALABRA MENOR_IGUAL NUMERO ai 
            {
              Object RESULT =null;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("ai",8, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ai ::= OR PALABRA MAYOR_IGUAL NUMERO ai 
            {
              Object RESULT =null;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("ai",8, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ai ::= OR PALABRA MENOR_QUE NUMERO ai 
            {
              Object RESULT =null;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("ai",8, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ai ::= OR PALABRA MAYOR_QUE NUMERO ai 
            {
              Object RESULT =null;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("ai",8, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ai ::= OR PALABRA IGUAL NUMERO ai 
            {
              Object RESULT =null;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("ai",8, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ai ::= OR PALABRA IGUAL COMILLA PALABRA COMILLA ai 
            {
              Object RESULT =null;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("ai",8, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ah ::= 
            {
              Object RESULT =null;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("ah",7, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ah ::= AND PALABRA MAYOR_MENOR NUMERO ah 
            {
              Object RESULT =null;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("ah",7, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ah ::= AND PALABRA MENOR_IGUAL NUMERO ah 
            {
              Object RESULT =null;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("ah",7, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ah ::= AND PALABRA MAYOR_IGUAL NUMERO ah 
            {
              Object RESULT =null;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("ah",7, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ah ::= AND PALABRA MENOR_QUE NUMERO ah 
            {
              Object RESULT =null;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("ah",7, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ah ::= AND PALABRA MAYOR_QUE NUMERO ah 
            {
              Object RESULT =null;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("ah",7, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ah ::= AND PALABRA IGUAL NUMERO ah 
            {
              Object RESULT =null;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("ah",7, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ah ::= AND PALABRA IGUAL COMILLA PALABRA COMILLA ah 
            {
              Object RESULT =null;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("ah",7, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ag ::= OR PALABRA MAYOR_MENOR NUMERO ai 
            {
              Object RESULT =null;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("ag",6, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ag ::= OR PALABRA MENOR_IGUAL NUMERO ai 
            {
              Object RESULT =null;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("ag",6, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ag ::= OR PALABRA MAYOR_IGUAL NUMERO ai 
            {
              Object RESULT =null;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("ag",6, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ag ::= OR PALABRA MENOR_QUE NUMERO ai 
            {
              Object RESULT =null;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("ag",6, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ag ::= OR PALABRA MAYOR_QUE NUMERO ai 
            {
              Object RESULT =null;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("ag",6, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ag ::= OR PALABRA IGUAL NUMERO ai 
            {
              Object RESULT =null;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("ag",6, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ag ::= OR PALABRA IGUAL COMILLA PALABRA COMILLA ai 
            {
              Object RESULT =null;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("ag",6, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // af ::= AND PALABRA MAYOR_MENOR NUMERO ah 
            {
              Object RESULT =null;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("af",5, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // af ::= AND PALABRA MENOR_IGUAL NUMERO ah 
            {
              Object RESULT =null;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("af",5, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // af ::= AND PALABRA MAYOR_IGUAL NUMERO ah 
            {
              Object RESULT =null;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("af",5, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // af ::= AND PALABRA MENOR_QUE NUMERO ah 
            {
              Object RESULT =null;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("af",5, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // af ::= AND PALABRA MAYOR_QUE NUMERO ah 
            {
              Object RESULT =null;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("af",5, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // af ::= AND PALABRA IGUAL NUMERO ah 
            {
              Object RESULT =null;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("af",5, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // af ::= AND PALABRA IGUAL COMILLA PALABRA COMILLA ah 
            {
              Object RESULT =null;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("af",5, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // z ::= 
            {
              Object RESULT =null;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("z",34, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // z ::= ag 
            {
              Object RESULT =null;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("z",34, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // z ::= af 
            {
              Object RESULT =null;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("z",34, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // y ::= PALABRA MAYOR_MENOR NUMERO z ad 
            {
              Object RESULT =null;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("y",33, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // y ::= PALABRA MENOR_IGUAL NUMERO z ad 
            {
              Object RESULT =null;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("y",33, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // y ::= PALABRA MAYOR_IGUAL NUMERO z ad 
            {
              Object RESULT =null;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("y",33, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // y ::= PALABRA MENOR_QUE NUMERO z ad 
            {
              Object RESULT =null;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("y",33, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // y ::= PALABRA MAYOR_QUE NUMERO z ad 
            {
              Object RESULT =null;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("y",33, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // y ::= PALABRA IGUAL NUMERO z ad 
            {
              Object RESULT =null;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("y",33, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // y ::= PALABRA IGUAL COMILLA PALABRA COMILLA z ad 
            {
              Object RESULT =null;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("y",33, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // x ::= FILTRAR y 
            {
              Object RESULT =null;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("x",32, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // x ::= PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("x",32, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // x ::= PUNTO PALABRA x 
            {
              Object RESULT =null;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("x",32, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // w ::= PALABRA PUNTO PALABRA x 
            {
              Object RESULT =null;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("w",31, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // l ::= FILTRAR y 
            {
              Object RESULT =null;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("l",20, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // l ::= PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("l",20, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // l ::= COMA PALABRA IGUAL NUMERO l 
            {
              Object RESULT =null;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("l",20, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // l ::= COMA PALABRA IGUAL COMILLA PALABRA COMILLA l 
            {
              Object RESULT =null;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("l",20, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // r ::= PALABRA IGUAL NUMERO l 
            {
              Object RESULT =null;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("r",26, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // r ::= PALABRA IGUAL COMILLA PALABRA COMILLA l 
            {
              Object RESULT =null;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("r",26, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // q ::= ASIGNAR r 
            {
              Object RESULT =null;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("q",25, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // q ::= PUNTO PALABRA q 
            {
              Object RESULT =null;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("q",25, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // p ::= PALABRA PUNTO PALABRA q 
            {
              Object RESULT =null;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("p",24, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // o ::= AGRUPACION_B PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("o",23, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // o ::= COMA NUMERO o 
            {
              Object RESULT =null;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("o",23, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // o ::= COMA COMILLA PALABRA COMILLA o 
            {
              Object RESULT =null;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("o",23, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // n ::= AGRUPACION_A NUMERO o 
            {
              Object RESULT =null;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("n",22, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // n ::= AGRUPACION_A COMILLA PALABRA COMILLA o 
            {
              Object RESULT =null;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("n",22, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // m ::= VALORES n 
            {
              Object RESULT =null;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("m",21, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // k ::= AGRUPACION_B m 
            {
              Object RESULT =null;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("k",19, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // k ::= COMA PALABRA k 
            {
              Object RESULT =null;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("k",19, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // j ::= m 
            {
              Object RESULT =null;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("j",18, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // j ::= AGRUPACION_A PALABRA k 
            {
              Object RESULT =null;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("j",18, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // j ::= PUNTO PALABRA j 
            {
              Object RESULT =null;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("j",18, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // i ::= PALABRA PUNTO PALABRA j 
            {
              Object RESULT =null;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("i",17, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // e ::= PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("e",13, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // e ::= FILTRAR y 
            {
              Object RESULT =null;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("e",13, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // e ::= PUNTO PALABRA e 
            {
              Object RESULT =null;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("e",13, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // c ::= EN PALABRA PUNTO PALABRA e 
            {
              Object RESULT =null;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("c",11, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // d ::= 
            {
              Object RESULT =null;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("d",12, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // d ::= COMA PALABRA NT$2 d 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-2)).value;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("d",12, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$2 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoMysql$stack.peek()).value;
System.out.println(e);
              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("NT$2",37, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // b ::= PALABRA NT$1 d c 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-2)).value;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("b",10, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$1 ::= 
            {
              Object RESULT =null;
parser.accionPosible = 2;
              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("NT$1",36, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // b ::= ASTERISCO NT$0 c 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-1)).value;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("b",10, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$0 ::= 
            {
              Object RESULT =null;
parser.accionPosible = 1;
              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("NT$0",35, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // aa ::= ELIMINAR EN w 
            {
              Object RESULT =null;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("aa",0, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // aa ::= ACTUALIZAR EN p 
            {
              Object RESULT =null;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("aa",0, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // aa ::= INSERTAR EN i 
            {
              Object RESULT =null;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("aa",0, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // aa ::= SELECCIONAR b 
            {
              Object RESULT =null;

              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("aa",0, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          return CUP$SintacticoMysql$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= aa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoMysql$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.elementAt(CUP$SintacticoMysql$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoMysql$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoMysql$parser.done_parsing();
          return CUP$SintacticoMysql$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

